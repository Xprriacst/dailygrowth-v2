import 'dart:io';

void main() async {
  print('üîß DEBUG SYST√àME NOTIFICATIONS - expertiaen5min@gmail.com');
  print('=' * 60);
  
  // Simuler les donn√©es de l'utilisateur depuis la base
  final userId = '550e8400-e29b-41d4-a716-446655440001';
  final userEmail = 'expertiaen5min@gmail.com';
  final notificationTime = '14:30:00';
  final notificationsEnabled = true;
  
  print('üë§ UTILISATEUR:');
  print('ID: $userId');
  print('Email: $userEmail');
  print('Heure notification: $notificationTime');
  print('Notifications activ√©es: $notificationsEnabled');
  
  // Simuler la logique de NotificationService.updateNotificationSettings()
  print('\nüîß SIMULATION updateNotificationSettings():');
  
  // 1. Calcul de l'offset timezone (ligne 357 du code)
  final timezoneOffsetMinutes = DateTime.now().timeZoneOffset.inMinutes;
  print('Offset timezone calcul√©: $timezoneOffsetMinutes minutes (${timezoneOffsetMinutes / 60}h)');
  
  // 2. Simulation de la mise √† jour en base
  final updateData = {
    'notification_time': notificationTime,
    'notifications_enabled': notificationsEnabled,
    'reminder_notifications_enabled': false,
    'notification_timezone_offset_minutes': timezoneOffsetMinutes,
  };
  
  print('Donn√©es √† sauvegarder: $updateData');
  
  // 3. Simulation de scheduleDailyNotification()
  print('\nüìÖ SIMULATION scheduleDailyNotification():');
  
  final timeParts = notificationTime.split(':');
  final hour = int.parse(timeParts[0]);
  final minute = int.parse(timeParts[1]);
  
  print('Heure pars√©e: ${hour}h${minute.toString().padLeft(2, '0')}');
  
  // 4. Simulation de _nextInstanceOfTime() (ligne 161-169)
  final now = DateTime.now();
  DateTime scheduledDate = DateTime(now.year, now.month, now.day, hour, minute);
  
  if (scheduledDate.isBefore(now)) {
    scheduledDate = scheduledDate.add(const Duration(days: 1));
    print('Heure pass√©e ‚Üí report√©e √† demain');
  } else {
    print('Heure future ‚Üí programm√©e aujourd\'hui');
  }
  
  final timeUntil = scheduledDate.difference(now);
  
  print('Notification programm√©e pour: $scheduledDate');
  print('Dans: ${timeUntil.inHours}h ${timeUntil.inMinutes % 60}min');
  
  // 5. V√©rification des probl√®mes potentiels
  print('\nüîç DIAGNOSTIC PROBL√àMES POTENTIELS:');
  
  // Probl√®me 1: Migration timezone manquante
  print('1. Migration timezone:');
  print('   - notification_timezone_offset_minutes calcul√©: ‚úÖ');
  print('   - Colonne existe en base: ‚ùì (√† v√©rifier)');
  
  // Probl√®me 2: Timezone hardcod√© Europe/Paris
  print('2. Timezone hardcod√©:');
  print('   - Code force Europe/Paris: ‚úÖ (OK pour France)');
  print('   - Syst√®me local en France: ‚úÖ');
  
  // Probl√®me 3: Diff√©rence Web vs Mobile
  print('3. Plateforme:');
  print('   - Web: Service Worker + heure locale navigateur');
  print('   - Mobile: flutter_local_notifications + timezone Paris');
  print('   - Coh√©rence: ‚úÖ (si utilisateur en France)');
  
  // Probl√®me 4: Gestion des erreurs
  print('4. Gestion erreurs:');
  print('   - Try/catch pr√©sent: ‚úÖ');
  print('   - Fallback UTC: ‚úÖ');
  print('   - Debug logs: ‚úÖ');
  
  // Test de conversion UTC
  print('\nüåç TEST CONVERSION UTC:');
  final utcTime = scheduledDate.toUtc();
  print('Heure locale: $scheduledDate');
  print('Heure UTC: $utcTime');
  print('Diff√©rence: ${scheduledDate.difference(utcTime).inHours}h');
  
  // Recommandations
  print('\nüí° RECOMMANDATIONS:');
  if (timeUntil.inMinutes < 60) {
    print('üö® URGENT: Notification dans ${timeUntil.inMinutes} minutes !');
    print('   ‚Üí Tester imm√©diatement pour v√©rifier le fonctionnement');
  } else {
    print('üìÖ Notification dans ${timeUntil.inHours}h${timeUntil.inMinutes % 60}min');
    print('   ‚Üí Programmer un test √† 14:25 pour v√©rifier');
  }
  
  print('\n‚úÖ SYST√àME SEMBLE CORRECT POUR LA FRANCE');
  print('   ‚Üí Probl√®me potentiel: Migration timezone non appliqu√©e en base');
  print('   ‚Üí Solution: Appliquer la migration ou ignorer si France uniquement');
}
