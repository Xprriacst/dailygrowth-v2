#!/bin/bash

# Script de test pour la nouvelle logique de g√©n√©ration unique
# Usage: ./test_single_challenge_generation.sh

echo "üß™ Test de la nouvelle logique de g√©n√©ration de micro-d√©fis"
echo "=================================================="

# Configuration
N8N_WEBHOOK_URL="https://polaris-ia.app.n8n.cloud/webhook/ui-defis-final"
PROJECT_DIR="/Users/alexandreerrasti/Downloads/dailygrowth v2"

echo ""
echo "1Ô∏è‚É£ Test du webhook n8n..."
echo "----------------------------"

# Test avec diff√©rents niveaux
test_webhook() {
    local problematique="$1"
    local nombre_defis="$2"
    local niveau="$3"
    
    echo "üéØ Test: $problematique (d√©fis relev√©s: $nombre_defis, niveau: $niveau)"
    
    response=$(curl -s -X POST "$N8N_WEBHOOK_URL" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "Je veux...=Je veux travailler sur: $problematique&Combien de d√©fi √† tu relev√©=$nombre_defis" \
        --max-time 30)
    
    if [ $? -eq 0 ]; then
        # V√©rifier que la r√©ponse contient exactement 1 d√©fi
        defis_count=$(echo "$response" | jq '.defis | length' 2>/dev/null)
        if [ "$defis_count" = "1" ]; then
            echo "‚úÖ Succ√®s: 1 d√©fi g√©n√©r√©"
            echo "   Nom: $(echo "$response" | jq -r '.defis[0].nom' 2>/dev/null)"
        else
            echo "‚ùå Erreur: $defis_count d√©fis g√©n√©r√©s au lieu de 1"
            echo "   R√©ponse: $response"
        fi
    else
        echo "‚ùå Erreur: Timeout ou √©chec de connexion"
    fi
    echo ""
}

# Tests avec diff√©rents sc√©narios
test_webhook "confiance en soi" "0" "d√©butant"
test_webhook "gestion des √©motions" "3" "interm√©diaire" 
test_webhook "leadership charismatique" "8" "avanc√©"

echo ""
echo "2Ô∏è‚É£ Test de l'application Flutter..."
echo "------------------------------------"

cd "$PROJECT_DIR"

# V√©rifier que les fichiers modifi√©s existent
echo "üìÅ V√©rification des fichiers modifi√©s:"
files_to_check=(
    "lib/services/n8n_challenge_service.dart"
    "lib/services/challenge_service.dart"
    "lib/presentation/challenge_selection/challenge_selection_screen.dart"
    "lib/presentation/onboarding_flow/widgets/life_domain_selection_widget.dart"
)

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file manquant"
    fi
done

echo ""
echo "üîç V√©rification des nouvelles m√©thodes:"
echo "---------------------------------------"

# V√©rifier que les nouvelles m√©thodes existent
if grep -q "generateSingleMicroChallenge" lib/services/n8n_challenge_service.dart; then
    echo "‚úÖ generateSingleMicroChallenge trouv√©e"
else
    echo "‚ùå generateSingleMicroChallenge manquante"
fi

if grep -q "_generateNewMicroChallengeViaAI" lib/services/challenge_service.dart; then
    echo "‚úÖ _generateNewMicroChallengeViaAI trouv√©e"
else
    echo "‚ùå _generateNewMicroChallengeViaAI manquante"
fi

if grep -q "generateSingleMicroChallengeWithFallback" lib/presentation/challenge_selection/challenge_selection_screen.dart; then
    echo "‚úÖ UI mise √† jour (challenge_selection)"
else
    echo "‚ùå UI non mise √† jour (challenge_selection)"
fi

echo ""
echo "üèóÔ∏è Test de compilation Flutter..."
echo "--------------------------------"

# Test de compilation
if flutter analyze --no-fatal-infos > /dev/null 2>&1; then
    echo "‚úÖ Analyse Flutter: OK"
else
    echo "‚ùå Analyse Flutter: Erreurs d√©tect√©es"
    echo "   Lancez 'flutter analyze' pour plus de d√©tails"
fi

echo ""
echo "üìä R√©sum√© des tests"
echo "==================="
echo "‚úÖ Tests termin√©s"
echo ""
echo "üîß Prochaines √©tapes:"
echo "1. Modifier le workflow n8n selon docs/N8N_SINGLE_CHALLENGE_WORKFLOW.md"
echo "2. Tester avec un utilisateur r√©el"
echo "3. V√©rifier les logs de g√©n√©ration"
echo "4. D√©ployer en production"
echo ""
echo "üìñ Documentation:"
echo "- docs/TESTING_SINGLE_CHALLENGE_FLOW.md"
echo "- docs/DEPLOYMENT_CHECKLIST.md"
