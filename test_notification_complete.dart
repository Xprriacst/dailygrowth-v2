import 'dart:io';

void main() async {
  print('üéØ TEST COMPLET NOTIFICATIONS - expertiaen5min@gmail.com');
  print('=' * 60);
  
  final now = DateTime.now();
  print('üïê Heure actuelle: ${now.toString()}');
  print('üåç Timezone: UTC${now.timeZoneOffset.isNegative ? '' : '+'}${now.timeZoneOffset.inHours}');
  
  // Test 1: Configuration utilisateur
  print('\n1Ô∏è‚É£ CONFIGURATION UTILISATEUR:');
  await testUserConfiguration();
  
  // Test 2: Logique de programmation
  print('\n2Ô∏è‚É£ LOGIQUE DE PROGRAMMATION:');
  await testSchedulingLogic();
  
  // Test 3: Gestion des cas limites
  print('\n3Ô∏è‚É£ CAS LIMITES:');
  await testEdgeCases();
  
  // Test 4: Recommandations
  print('\n4Ô∏è‚É£ RECOMMANDATIONS:');
  await printRecommendations();
}

Future<void> testUserConfiguration() async {
  // Simuler la r√©cup√©ration depuis la base
  final userConfig = {
    'id': '550e8400-e29b-41d4-a716-446655440001',
    'email': 'expertiaen5min@gmail.com',
    'notification_time': '14:30:00',
    'notifications_enabled': true,
    'reminder_notifications_enabled': false,
    'notification_timezone_offset_minutes': 120, // UTC+2 (France √©t√©)
  };
  
  print('‚úÖ Configuration r√©cup√©r√©e:');
  userConfig.forEach((key, value) {
    print('   $key: $value');
  });
  
  // V√©rifier la coh√©rence
  final systemOffset = DateTime.now().timeZoneOffset.inMinutes;
  final userOffset = userConfig['notification_timezone_offset_minutes'] as int;
  
  if (systemOffset == userOffset) {
    print('‚úÖ Timezone coh√©rente: syst√®me ($systemOffset min) = utilisateur ($userOffset min)');
  } else {
    print('‚ö†Ô∏è Timezone diff√©rente: syst√®me ($systemOffset min) ‚â† utilisateur ($userOffset min)');
  }
}

Future<void> testSchedulingLogic() async {
  final notificationTime = '14:30:00';
  final timeParts = notificationTime.split(':');
  final hour = int.parse(timeParts[0]);
  final minute = int.parse(timeParts[1]);
  
  print('Heure configur√©e: ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}');
  
  // Logique de _nextInstanceOfTime()
  final now = DateTime.now();
  DateTime scheduledDate = DateTime(now.year, now.month, now.day, hour, minute);
  
  if (scheduledDate.isBefore(now)) {
    scheduledDate = scheduledDate.add(const Duration(days: 1));
    print('‚è∞ Heure pass√©e ‚Üí notification report√©e √† demain');
  } else {
    print('‚è∞ Heure future ‚Üí notification programm√©e aujourd\'hui');
  }
  
  final timeUntil = scheduledDate.difference(now);
  print('üìÖ Prochaine notification: $scheduledDate');
  print('‚è±Ô∏è Dans: ${timeUntil.inHours}h ${timeUntil.inMinutes % 60}min ${timeUntil.inSeconds % 60}s');
  
  // V√©rifier si c'est dans la plage de test
  if (timeUntil.inMinutes <= 5) {
    print('üö® NOTIFICATION IMMINENTE ! Parfait pour tester maintenant');
  } else if (timeUntil.inMinutes <= 60) {
    print('‚è∞ Notification dans moins d\'1h - bon moment pour tester');
  } else {
    print('üìÖ Notification plus tard - modifier l\'heure pour tester');
  }
}

Future<void> testEdgeCases() async {
  print('Test des cas limites:');
  
  // Cas 1: Heure exacte (maintenant)
  final now = DateTime.now();
  final currentTimeStr = '${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}:00';
  print('1. Heure actuelle ($currentTimeStr):');
  
  DateTime currentScheduled = DateTime(now.year, now.month, now.day, now.hour, now.minute);
  if (currentScheduled.isBefore(now)) {
    currentScheduled = currentScheduled.add(const Duration(days: 1));
    print('   ‚Üí Report√©e √† demain (logique correcte)');
  } else {
    print('   ‚Üí Programm√©e maintenant (peut cr√©er des conflits)');
  }
  
  // Cas 2: Minuit
  print('2. Notification √† minuit (00:00):');
  DateTime midnightScheduled = DateTime(now.year, now.month, now.day, 0, 0);
  if (midnightScheduled.isBefore(now)) {
    midnightScheduled = midnightScheduled.add(const Duration(days: 1));
    print('   ‚Üí Report√©e √† demain minuit ‚úÖ');
  }
  
  // Cas 3: Changement d'heure (√©t√©/hiver)
  print('3. Changement d\'heure:');
  print('   - Actuellement: UTC+2 (heure d\'√©t√©) ‚úÖ');
  print('   - Passage hiver: Le syst√®me s\'adaptera automatiquement ‚úÖ');
  
  // Cas 4: Weekend vs semaine
  final dayOfWeek = now.weekday;
  final dayName = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'][dayOfWeek - 1];
  print('4. Jour de la semaine:');
  print('   - Aujourd\'hui: $dayName');
  print('   - Notifications 7j/7: ‚úÖ (pas de logique weekend)');
}

Future<void> printRecommendations() async {
  final now = DateTime.now();
  final targetTime = DateTime(now.year, now.month, now.day, 14, 30);
  final timeUntil = targetTime.difference(now);
  
  print('üéØ PLAN DE TEST RECOMMAND√â:');
  
  if (timeUntil.inMinutes > 0 && timeUntil.inMinutes <= 10) {
    print('üö® URGENT - Tester MAINTENANT:');
    print('1. Ouvrir l\'app DailyGrowth');
    print('2. Aller dans Profil ‚Üí Notifications');
    print('3. V√©rifier que l\'heure est bien 14:30');
    print('4. Attendre ${timeUntil.inMinutes} minutes');
    print('5. V√©rifier si la notification arrive');
  } else if (timeUntil.inMinutes <= 60) {
    print('‚è∞ PR√âPARER LE TEST:');
    print('1. Dans ${timeUntil.inMinutes} minutes, la notification devrait arriver');
    print('2. Pr√©parer l\'app et surveiller');
    print('3. V√©rifier les logs dans la console');
  } else if (timeUntil.inMinutes < 0) {
    print('üìÖ PROGRAMMER POUR DEMAIN:');
    final tomorrow = targetTime.add(const Duration(days: 1));
    print('1. Prochaine notification: $tomorrow');
    print('2. Ou modifier l\'heure pour tester plus t√¥t');
  } else {
    print('üîß TEST IMM√âDIAT:');
    print('1. Modifier l\'heure de notification √† ${now.hour}:${(now.minute + 2).toString().padLeft(2, '0')}');
    print('2. Sauvegarder les param√®tres');
    print('3. Attendre 2 minutes');
    print('4. V√©rifier la notification');
  }
  
  print('\nüîç POINTS √Ä V√âRIFIER:');
  print('‚úÖ Notification re√ßue √† l\'heure exacte');
  print('‚úÖ Titre: "üéØ Votre d√©fi quotidien vous attend !"');
  print('‚úÖ Corps: "Connectez-vous pour d√©couvrir votre nouveau micro-d√©fi personnalis√©."');
  print('‚úÖ Clic sur notification ‚Üí ouvre l\'app');
  print('‚úÖ Pas de notification en double');
  
  print('\nüêõ SI PROBL√àME:');
  print('1. V√©rifier les permissions de notification');
  print('2. Consulter les logs de l\'app (console d√©veloppeur)');
  print('3. Tester sur diff√©rentes plateformes (web/mobile)');
  print('4. V√©rifier la base de donn√©es Supabase');
}
