name: Tests Automatis√©s DailyGrowth

on:
  push:
    branches: [ main, development, new-feature ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    name: Tests Unitaires et d'Int√©gration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Run unit tests with coverage
      run: flutter test --coverage test/unit/
      
    - name: Run integration tests
      run: flutter test test/integration/
      
    - name: Generate coverage report
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        genhtml coverage/lcov.info -o coverage/html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: 5monkeys/cobertura-action@master
      with:
        path: coverage/lcov.info
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 80

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build web
      run: flutter build web --release
      
    - name: Upload web build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK
      run: flutter build apk --release
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Setup CocoaPods
      run: |
        cd ios
        pod install
        
    - name: Build iOS (no signing)
      run: flutter build ios --release --no-codesign
      
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/ios/iphoneos/

  performance-test:
    name: Tests de Performance
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run performance tests
      run: |
        # Tests de performance sp√©cifiques √† DailyGrowth
        flutter test test/performance/ --reporter=json > performance_results.json || true
        
    - name: Analyze performance results
      run: |
        echo "Performance test results:"
        cat performance_results.json | jq '.tests[] | select(.result == "error" or .result == "failure")'

  security-scan:
    name: Scan de S√©curit√©
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run dependency vulnerability scan
      run: |
        # Scan des d√©pendances Flutter
        flutter pub deps --json > dependencies.json
        
    - name: Check for known vulnerabilities
      run: |
        # V√©rification des vuln√©rabilit√©s connues dans les d√©pendances
        echo "Scanning dependencies for vulnerabilities..."
        # Ici on pourrait int√©grer un outil comme safety ou snyk

  deploy-staging:
    name: D√©ploiement Staging
    runs-on: ubuntu-latest
    needs: [build-web, build-android]
    if: github.ref == 'refs/heads/development'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download web build
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: build/web/
        
    - name: Deploy to Netlify staging
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './build/web'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - ${{ github.event.head_commit.message }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

  deploy-production:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    needs: [build-web, build-android, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download web build
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: build/web/
        
    - name: Deploy to Netlify production
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './build/web'
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deploy - ${{ github.event.head_commit.message }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}

  notification:
    name: Notification de R√©sultats
    runs-on: ubuntu-latest
    needs: [test, build-web, build-android, build-ios]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build-web.result == 'success' }}
      run: |
        echo "‚úÖ Tous les tests et builds ont r√©ussi!"
        echo "üöÄ Pr√™t pour le d√©ploiement"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build-web.result == 'failure' }}
      run: |
        echo "‚ùå Des tests ou builds ont √©chou√©"
        echo "üîç V√©rifiez les logs pour plus de d√©tails"
        exit 1
